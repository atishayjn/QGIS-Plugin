# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RandomForestClassifier
                                 A QGIS plugin
 -
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-01
        git sha              : $Format:%H$
        copyright            : (C) 2020 by -
        email                : -
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .RandomForestClassifier_dialog import RandomForestClassifierDialog
import os.path


class RandomForestClassifier:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RandomForestClassifier_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&RandomForestClassifier')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RandomForestClassifier', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/RandomForestClassifier/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'RandomForestClassifier'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&RandomForestClassifier'),
                action)
            self.iface.removeToolBarIcon(action)

    # def show_pop(self):
    #     msg = QMessa

    # def saysome(self):
    #     print("Button Clicked")

#------------------------------------------------------------------------------------------------------------
        def randomForest(self, fp1, fp2, fp3):
        #import statements
        
            try:
                from sklearn.model_selection import train_test_split
                from sklearn.ensemble import RandomForestClassifier
                from sklearn.metrics import confusion_matrix,classification_report
            except ImportError:
                print("scikit-learn package not present\nInstalling...")
                import pip
                pip.main(["install", "--user", "scikit-learn"])

                from sklearn.model_selection import train_test_split
                from sklearn.ensemble import RandomForestClassifier
                from sklearn.metrics import confusion_matrix,classification_report

            try:
                from osgeo import gdal, gdal_array
            except ImportError:
                print("GDAL package not present\nInstalling...")
                import pip
                pip.main(["install", "--user", "GDAL"])
                from osgeo import gdal, gdal_array

            try:
                import pickle
            except ImportError:
                import pip
                pip.main(["install", "--user", "pickle"])
                import pickle


            try:
                import numpy as np
            except ImportError:
                import pip
                pip.main(["install", "--user", "numpy"])
                import numpy as np

            try:
                import seaborn as sns
            except ImportError:
                import pip
                pip.main(["install", "--user", "seaborn"])
                import seaborn as sns

            try:
                import matplotlib.pyplot as plt
            except ImportError:
                import pip
                pip.main(["install", "--user", "matplotlib"])

                import matplotlib.pyplot as plt
                


            #Paths
            #DATA_PATH = "/content/drive/My Drive/PS-1/meghalaya_data/"
            IMAGE_ADD = fp1
            MODEL_ADD = fp2
            OUTPUT_ADD = fp3

            # #To open the image:
            img_ds = gdal.Open(IMAGE_ADD, gdal.GA_ReadOnly)

            img = np.zeros((img_ds.RasterYSize, img_ds.RasterXSize, img_ds.RasterCount),
                           gdal_array.GDALTypeCodeToNumericTypeCode(img_ds.GetRasterBand(1).DataType))

            for b in range(img.shape[2]):
                img[:, :, b] = img_ds.GetRasterBand(b + 1).ReadAsArray()

            print(img.shape)

            rf = pickle.load(open(MODEL_ADD, 'rb'))

            img_as_array = img.reshape(-1, 8)
            print('Reshaped from {o} to {n}'.format(o=img.shape,
                                                    n=img_as_array.shape))

            # Now predict for each pixel
            class_prediction = rf.predict(img_as_array)

            # Reshape our classification map
            class_prediction = class_prediction.reshape(img[:, :, 0].shape)
            print(class_prediction.shape)


           # Visualize

            # First setup a 5-4-3 composite
            def color_stretch(image, index, minmax=(0, 10000)):
                colors = image[:, :, index].astype(np.float64)

                max_val = minmax[1]
                min_val = minmax[0]

                # Enforce maximum and minimum values
                colors[colors[:, :, :] > max_val] = max_val
                colors[colors[:, :, :] < min_val] = min_val

                for b in range(colors.shape[2]):
                    colors[:, :, b] = colors[:, :, b] * 1 / (max_val - min_val)
                    
                return colors
                
            img543 = color_stretch(img, [3, 2, 1], (0, 8000))

            # See https://github.com/matplotlib/matplotlib/issues/844/
            n = class_prediction.max()
            # Next setup a colormap for our map
            colors = dict((
                (0, (0, 0, 0, 255)),  # Nodata
                (2, (0, 150, 0, 255)),  # Forest
                (1, (0, 0, 255, 255)),  # Water
                (3, (150, 0, 0, 255))  # Landuse
            ))
            # Put 0 - 255 as float 0 - 1
            for k in colors:
                v = colors[k]
                _v = [_v / 255.0 for _v in v]
                colors[k] = _v
                
            index_colors = [colors[key] if key in colors else 
                            (255, 255, 255, 0) for key in range(1, n + 1)]
            cmap = plt.matplotlib.colors.ListedColormap(index_colors)#, 'Classification', n)

            # Now show the classmap next to the image
            plt.subplot(121)
            plt.imshow(img543)
            plt.title('Landsat Image')
            print(class_prediction.shape)
            plt.subplot(122)
            plt.imshow(class_prediction, cmap=cmap, interpolation='none')
            plt.title('Classified Image')

            plt.savefig("/content/out.pdf")
            plt.savefig("/content/out.png")
            plt.show()

           
#-------------------------------------------------------------------------------------------------------

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RandomForestClassifierDialog()
#--------------------------------------------------------------------------------------------------

        
        # show the dialog
        self.dlg.show()

        IMG_ADD = self.dlg.input_img_box.filePath()
        MODEL_ADD = self.dlg.input_img_box_2.filePath()
        OUTPUT_ADD = self.dlg.input_img_box_3.filePath()

        #self.dlg.pushButton.clicked.connect(self.saysome)

        #self.dlg.testButton.clicked.connect(QMessageBox(self.iface.mainWindow(), 'Reverse Geocoding Error', 'Wrong Format!\nExiting...'))
        print(IMG_ADD)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
